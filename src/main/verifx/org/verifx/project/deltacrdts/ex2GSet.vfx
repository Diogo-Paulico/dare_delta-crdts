import org.verifx.project.deltacrdtsproofs.CvRDT
import org.verifx.project.deltacrdtsproofs.CvRDTProof
import org.verifx.project.deltacrdtsproofs.CvRDTProof1

// Exercise 2.1: Implement a state-based grow-only set CRDT.
/*
class IntGSet(s: Set[Int]) extends CvRDT[IntGSet] {
  def add(element: Int): IntGSet = new IntGSet(this.s.add(element))
  def lookup(element: Int): Boolean = this.s.contains(element)
  def merge(that: IntGSet): IntGSet = new IntGSet(this.s.union(that.s))
  def compare(that: IntGSet): Boolean = this.s.subsetOf(that.s)
}

object IntGSet extends CvRDTProof[IntGSet]
*/

// Exercise 2.2: Now make the set generic in the type of elements it holds.

class GSet[V](s: Set[V] = new Set[V]()) extends CvRDT[GSet[V]] {
  def add(element: V): GSet[V] = new GSet[V](this.s.add(element))
  def lookup(element: V): Boolean = this.s.contains(element)
  def merge(that: GSet[V]): GSet[V] = new GSet[V](this.s.union(that.s))
  def compare(that: GSet[V]): Boolean = this.s.subsetOf(that.s)
}
object GSet extends CvRDTProof1[GSet]
